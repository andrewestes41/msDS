tm_shape(grocer.sf) +
tm_dots(col="Facility.Type") +
tm_layout(legend.outside = TRUE)
tmap_mode(mode = "view")
tm_basemap() +
tm_shape(df.new) +
tm_polygons(col="CENSUSAREA", id="CENSUSAREA", title="CENSUSAREA", alpha = 0.5) +
tm_shape(grocer.sf) +
tm_dots(col="Facility.Type") +
tm_layout(legend.outside = TRUE)
tmap_mode(mode = "view")
tm_basemap() +
tm_shape(df.new) +
tm_polygons(col="CENSUSAREA", id="CENSUSAREA", title="CENSUSAREA", alpha = 0.5) +
tm_shape(grocer.sf) +
tm_dots(col="Facility.Type") +
tm_layout(legend.outside = TRUE)
tmap_mode(mode = "view")
tm_basemap() +
tm_shape(df.new) +
tm_polygons(col="CENSUSAREA", id="CENSUSAREA", title="CENSUSAREA", alpha = 0.5) +
tm_shape(grocer.sf) +
tm_dots(col="Facility.Type") +
tm_layout(legend.outside = TRUE)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(tidyverse)
library(tmap)
library(tmaptools)
library(raster)
#install.packages("spDataLarge", repos = "https://nowosad.github.io/drat/", type = "source")
library(spDataLarge)
library(stars)
library(leaflet)
library(mapview)
library(RColorBrewer)
df <- read.csv("C:\\Users\\andre\\OneDrive\\Desktop\\PDAT 624\\FoodAccessResearchAtlasData2019.csv", na.strings=(''))
df.mo <- df %>%
filter(State == "Missouri") %>%
mutate(CensusTract = as.character(CensusTract))
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(tidyverse)
library(tmap)
library(tmaptools)
library(raster)
#install.packages("spDataLarge", repos = "https://nowosad.github.io/drat/", type = "source")
library(spDataLarge)
library(stars)
library(leaflet)
library(mapview)
library(RColorBrewer)
df <- read.csv("C:\\Users\\andre\\OneDrive\\Desktop\\PDAT 624\\FoodAccessResearchAtlasData2019.csv", na.strings=(''))
df.mo <- df %>%
filter(State == "Missouri") %>%
mutate(CensusTract = as.character(CensusTract))
df.census <- read_sf("C:/Users/andre/OneDrive/Desktop/PDAT 624/gz_2010_29_140_00_500k.shp")
df.census.2 <- unite(df.census,
col = 'CensusTract',
c('STATE','COUNTY','TRACT')) %>%
mutate(CensusTract = as.character(CensusTract)) %>%
mutate(CensusTract = gsub('_','',CensusTract))
df.join <- merge(df.census.2, df.mo)
grocer <- read.csv("C:\\Users\\andre\\OneDrive\\Desktop\\PDAT 624\\Grocery_Store_Map_for_Active_Living__Healthy_Lifestyle_Dashboard_Cleaned.csv", na.strings=(''))
grocer <- grocer %>%
mutate(Longitude = Longitude + 190)
#mutate(Latitude = Latitude + 190)
grocer.sf <- st_as_sf(grocer, coords=c("Longitude", "Latitude"), crs=4326)
df.new <- df.join %>%
filter(County == c("Jackson County", "Platte County", "Clay County", "Cass County"))
ggplot() +
geom_sf(data=grocer.sf, aes(color=Facility.Type)) +
geom_sf(data=df.new, aes(fill=CENSUSAREA))
df <- read.csv("C:\\Users\\andre\\OneDrive\\Desktop\\PDAT 624\\FoodAccessResearchAtlasData2019.csv", na.strings=(''))
df <- df %>%
filter(State == "Missouri") %>%
mutate(CensusTract = as.character(CensusTract))
df.census <- read_sf("C:/Users/andre/OneDrive/Desktop/PDAT 624/gz_2010_29_140_00_500k.shp")
df.census.2 <- unite(df.census,
col = 'CensusTract',
c('STATE','COUNTY','TRACT')) %>%
mutate(CensusTract = as.character(CensusTract)) %>%
mutate(CensusTract = gsub('_','',CensusTract))
df.join <- merge(df.census.2, df)
grocer <- read.csv("C:\\Users\\andre\\OneDrive\\Desktop\\PDAT 624\\Grocery_Store_Map_for_Active_Living__Healthy_Lifestyle_Dashboard_Cleaned.csv", na.strings=(''))
grocer <- grocer %>%
mutate(Longitude = Longitude + 190)
#mutate(Latitude = Latitude + 190)
grocer.sf <- st_as_sf(grocer, coords=c("Longitude", "Latitude"), crs=4326)
df.new <- df.join %>%
filter(County == c("Jackson County", "Platte County", "Clay County", "Cass County"))
ggplot() +
geom_sf(data=grocer.sf, aes(color=Facility.Type)) +
geom_sf(data=df.new, aes(fill=CENSUSAREA))
tmap_mode(mode = "view")
tm_basemap() +
tm_shape(df.new) +
tm_polygons(col="CENSUSAREA", id="CENSUSAREA", title="CENSUSAREA", alpha = 0.5) +
tm_shape(grocer.sf) +
tm_dots(col="Facility.Type") +
tm_layout(legend.outside = TRUE)
ggplot() +
geom_sf(data=df.new, aes(fill=CENSUSAREA))
ggplot() +
geom_sf(data=grocer.sf, aes(color=Facility.Type)) +
ggplot() +
geom_sf(data=grocer.sf, aes(color=Facility.Type))
View(grocer.sf)
grocer <- grocer %>%
mutate(Longitude = Longitude + 190)
grocer <- read.csv("C:\\Users\\andre\\OneDrive\\Desktop\\PDAT 624\\Grocery_Store_Map_for_Active_Living__Healthy_Lifestyle_Dashboard_Cleaned.csv", na.strings=(''))
grocer <- grocer %>%
mutate(Longitude = Longitude + 190)
grocer <- grocer %>%
mutate(Longitude = Longitude + 190) %>%
mutate(Latitude = Latitude - 190)
grocer.sf <- st_as_sf(grocer, coords=c("Longitude", "Latitude"), crs=4326)
grocer <- grocer %>%
mutate(Longitude = Longitude) %>%
mutate(Latitude = Latitude - 190)
grocer <- read.csv("C:\\Users\\andre\\OneDrive\\Desktop\\PDAT 624\\Grocery_Store_Map_for_Active_Living__Healthy_Lifestyle_Dashboard_Cleaned.csv", na.strings=(''))
grocer <- grocer %>%
mutate(Longitude = Longitude) %>%
mutate(Latitude = Latitude - 190)
grocer <- read.csv("C:\\Users\\andre\\OneDrive\\Desktop\\PDAT 624\\Grocery_Store_Map_for_Active_Living__Healthy_Lifestyle_Dashboard_Cleaned.csv", na.strings=(''))
grocer <- grocer %>%
mutate(Longitude = Longitude) %>%
mutate(Latitude = Latitude + 190)
grocer <- read.csv("C:\\Users\\andre\\OneDrive\\Desktop\\PDAT 624\\Grocery_Store_Map_for_Active_Living__Healthy_Lifestyle_Dashboard_Cleaned.csv", na.strings=(''))
grocer <- grocer %>%
mutate(Longitude = Longitude) %>%
mutate(Latitude = Latitude)
grocer.sf <- st_as_sf(grocer, coords=c("Longitude", "Latitude"), crs=4326)
df.new <- df.join %>%
filter(County == c("Jackson County", "Platte County", "Clay County", "Cass County"))
ggplot() +
geom_sf(data=grocer.sf, aes(color=Facility.Type)) +
geom_sf(data=df.new, aes(fill=CENSUSAREA))
ggplot() +
geom_sf(data=grocer.sf, aes(color=Facility.Type))
tmap_mode(mode = "view")
tm_basemap() +
tm_shape(df.new) +
tm_polygons(col="CENSUSAREA", id="CENSUSAREA", title="CENSUSAREA", alpha = 0.5) +
tm_shape(grocer.sf) +
tm_dots(col="Facility.Type") +
tm_layout(legend.outside = TRUE)
#normalize pit stop based off percentages by year (different # races/yr)
#why are pit stops so frequent on lap 1/2
#pit stop times by driver and team
#scatterplot tyre life vs lap #
#factor messages$message and histogram type
#factor messages$flag
#factor messages$category
#break into year and by course
#do weather shiny app and data by course/year
library(readxl)
library(tidyverse)
library(dplyr)
library(lubridate)
library(colorspace)
library(patchwork)
library(forecast)
library(zoo)
library(xts)
library(janitor)
library(knitr)
library(TTR)
library(viridis)
library(randtests)
library(gridExtra)
library(plotly)
library(shiny)
library(knitr)
z.orig.laps <- read.csv("laps.csv")
laps  <- z.orig.laps
z.orig.weather <- read.csv("weather.csv")
weather  <- z.orig.weather
z.orig.messages <- read.csv("messages.csv")
messages  <- z.orig.messages
library(readxl)
library(tidyverse)
library(dplyr)
library(lubridate)
library(colorspace)
library(patchwork)
library(forecast)
library(zoo)
library(xts)
library(janitor)
library(knitr)
library(TTR)
library(viridis)
library(randtests)
library(gridExtra)
library(plotly)
library(shiny)
library(knitr)
z.orig.laps <- read.csv("laps.csv")
laps  <- z.orig.laps
z.orig.weather <- read.csv("weather.csv")
weather  <- z.orig.weather
z.orig.messages <- read.csv("messages.csv")
messages  <- z.orig.messages
pitInOnly <- laps[complete.cases(laps$PitInTime),]
ggplot(pitInOnly,
aes(
x = LapNumber
)) +
geom_histogram(
binwidth = 1
) +
ggtitle("Pit Stop In, Cumulative, All Laps")
#graphing the pitstop entrances excluding the first lap
pitInExclude1 <- subset(pitInOnly, LapNumber!=1) %>%
ggplot(aes(
x = LapNumber
)) +
geom_histogram(
binwidth = 1
) +
ggtitle("Pit Stop In, Cumulative, Excluding Lap 1")
pitInExclude1
#graphing the pitstop exits, excluding the first lap, only for 2018
pitInExclude1.2018 <- pitInOnly %>%
subset(LapNumber!=1) %>%
filter(Year == 2018) %>%
ggplot(aes(
x = LapNumber
)) +
geom_histogram(
binwidth = 1
) +
ggtitle("Pit Stop In, 2018, Excluding Lap 1")
pitInExclude1.2018
#graphing the pitstop exits, excluding the first lap, only for 2019
pitInExclude1.2019 <- pitInOnly %>%
subset(LapNumber!=1) %>%
filter(Year == 2019) %>%
ggplot(aes(
x = LapNumber
)) +
geom_histogram(
binwidth = 1
) +
ggtitle("Pit Stop In, 2019, Excluding Lap 1")
pitInExclude1.2019
#graphing the pitstop exits, excluding the first lap, only for 2020
pitInExclude1.2020 <- pitInOnly %>%
subset(LapNumber!=1) %>%
filter(Year == 2020) %>%
ggplot(aes(
x = LapNumber
)) +
geom_histogram(
binwidth = 1
) +
ggtitle("Pit Stop In, 2020, Excluding Lap 1")
pitInExclude1.2020
#graphing the pitstop exits, excluding the first lap, only for 2021
pitInExclude1.2021 <- pitInOnly %>%
subset(LapNumber!=1) %>%
filter(Year == 2021) %>%
ggplot(aes(
x = LapNumber
)) +
geom_histogram(
binwidth = 1
) +
ggtitle("Pit Stop In, 2021, Excluding Lap 1")
pitInExclude1.2021
#graphing the pitstop exits, excluding the first lap, only for 2022
pitInExclude1.2022 <- pitInOnly %>%
subset(LapNumber!=1) %>%
filter(Year == 2022) %>%
ggplot(aes(
x = LapNumber
)) +
geom_histogram(
binwidth = 1
) +
ggtitle("Pit Stop In, 2022, Excluding Lap 1")
pitInExclude1.2022
pitOutOnly <- laps[complete.cases(laps$PitOutTime),]
ggplot(pitOutOnly,
aes(
x = LapNumber
)) +
geom_histogram(
binwidth = 1
) +
ggtitle("Pit Stop Exit, Cumulative, All Laps")
#graphing the pitstop exits excluding the first lap
pitOutExclude1 <- subset(pitOutOnly, LapNumber!=1) %>%
ggplot(aes(
x = LapNumber
)) +
geom_histogram(
binwidth = 1
) +
ggtitle("Pit Stop Exit, Cumulative, Excluding Lap 1")
pitOutExclude1
#graphing the pitstop exits, excluding the first lap, only for 2018
pitoutExclude1.2018 <- pitOutOnly %>%
subset(LapNumber!=1) %>%
filter(Year == 2018) %>%
ggplot(aes(
x = LapNumber
)) +
geom_histogram(
binwidth = 1
) +
ggtitle("Pit Stop Exit, 2018, Excluding Lap 1")
pitoutExclude1.2018
#graphing the pitstop exits, excluding the first lap, only for 2019
pitoutExclude1.2019 <- pitOutOnly %>%
subset(LapNumber!=1) %>%
filter(Year == 2019) %>%
ggplot(aes(
x = LapNumber
)) +
geom_histogram(
binwidth = 1
) +
ggtitle("Pit Stop Exit, 2019, Excluding Lap 1")
pitoutExclude1.2019
#graphing the pitstop exits, excluding the first lap, only for 2020
pitoutExclude1.2020 <- pitOutOnly %>%
subset(LapNumber!=1) %>%
filter(Year == 2020) %>%
ggplot(aes(
x = LapNumber
)) +
geom_histogram(
binwidth = 1
) +
ggtitle("Pit Stop Exit, 2020, Excluding Lap 1")
pitoutExclude1.2020
#graphing the pitstop exits, excluding the first lap, only for 2021
pitoutExclude1.2021 <- pitOutOnly %>%
subset(LapNumber!=1) %>%
filter(Year == 2021) %>%
ggplot(aes(
x = LapNumber
)) +
geom_histogram(
binwidth = 1
) +
ggtitle("Pit Stop Exit, 2021, Excluding Lap 1")
pitoutExclude1.2021
#graphing the pitstop exits, excluding the first lap, only for 2022
pitoutExclude1.2022 <- pitOutOnly %>%
subset(LapNumber!=1) %>%
filter(Year == 2022) %>%
ggplot(aes(
x = LapNumber
)) +
geom_histogram(
binwidth = 1
) +
ggtitle("Pit Stop Exit, 2022, Excluding Lap 1")
pitoutExclude1.2022
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(plotly)
courses <- c(
"Australia", "Bahrain","China", "Azerbaijan", "Spain", "Monaco", "Canada",
"France","Austria","Great Britain","Germany","Hungary","Belgium","Italy",
"Singapore","Russia","Japan","United States","Mexico","Brazil","United Arab Emirates",
"Abu Dhabi","Portugal","Turkey","Netherlands","Qatar","Saudi Arabia")
pitInVariables <- as.list(colnames(pitInOnly))
# Define UI for application
ui <- fluidPage(
titlePanel("Pit In Lap Number Histogram by Course"),
sidebarLayout(
sidebarPanel("Sidebar Panel",
selectInput( inputId = "courses",
label = h3("Select a Course"),
choices = courses,
selected = "Australia"),
selectInput(inputId =  "var1",
label = h3("Choose A Variable"),
choices = pitInVariables,
selected = "LapNumber"),
sliderInput("Year", "Year:",
min = 2018, max = 2022,
value = c(2019, 2021),
step = 1)
),
mainPanel(
h2("Histogram of Pit Stop By Courses"),
#      plotOutput("CoursesPlot2"),
plotlyOutput("CoursesPlot"),
dataTableOutput("data")
)
)
)
# Define server logic
server <- function(input, output) {
#https://stackoverflow.com/questions/40861908/shiny-r-implement-slider-input
#  data.react <- reactive({
#    if(!is.null(input$Year)){
#      data.react <- pitInOnly %>%
#        filter(Year >= input$year[1] & Year <= input$Year[2])
#    }
#    data.react
#  })*
#  output$CoursesPlot2 <- renderPlot({
#    plot(data=data.react(), x=Year, y=LapNumber)
#  })
output$CoursesPlot <- renderPlotly({
p <- pitInOnly %>%
mutate(
courses = input$courses) %>%
filter(
RACE == courses) %>%
filter(
Year >= input$Year[1] & Year <= input$Year[2]
) %>%
ggplot(aes(x = .data[[input$var1]])) +
geom_histogram()
ggplotly(p)
})
output$data <- renderDataTable({pitInOnly %>%
mutate(
courses = input$courses) %>%
filter(
RACE == courses)
})
}
# Run the application
shinyApp(ui = ui, server = server)
#standardize/normalize the weather data
weatherAir_scale <- scale(weather$AirTemp)
weatherTrack_scale <- scale(weather$TrackTemp)
weatherHumidity_scale <- scale(weather$Humidity)
weatherPressure_scale <- scale(weather$Pressure)
weatherWind_scale <- scale(weather$WindSpeed)
weather_scale <- weather %>%
mutate(AirScale = weatherAir_scale) %>%
mutate(TrackScale = weatherTrack_scale) %>%
mutate(HumidityScale = weatherHumidity_scale) %>%
mutate(PressureScale = weatherPressure_scale) %>%
mutate(WindScale = weatherWind_scale)
#grouping by race and finding the averages and ranges per track/year
by_race <- weather_scale %>%
group_by(RACE, Year) %>%
summarise(
meanAir = mean(AirTemp),
minAir = min(AirTemp),
maxAir = max(AirTemp),
rangeAir = maxAir - minAir,
meanTrack = mean(TrackTemp),
minTrack = min(TrackTemp),
maxTrack = max(TrackTemp),
rangeTrack = maxTrack - minTrack,
meanHumidity = mean(Humidity),
minHumidity = min(Humidity),
maxHumidity = max(Humidity),
rangeHumidity = maxHumidity - minHumidity,
meanPressure = mean(Pressure),
minPressure = min(Pressure),
maxPressure = max(Pressure),
rangePressure = maxPressure - minPressure,
meanWind = mean(WindSpeed),
minWind = min(WindSpeed),
maxWind = max(WindSpeed),
rangeWind = maxWind - minWind
)
#showing the range of the mean all data across all races & years
#showing the range of the range for all data across all races & years
by_race_range <- data.frame(
AirTemperatureMean = round(range(by_race$meanAir), 2),
AirTemperatureRange = round(range(by_race$rangeAir), 2),
TrackTemperatureMean = round(range(by_race$meanTrack), 2),
TrackTemperatureRange = round(range(by_race$rangeTrack), 2),
HumidityMean = round(range(by_race$meanHumidity), 2),
HumidityRange = round(range(by_race$rangeHumidiy), 2),
AirPressureMean = round(range(by_race$meanPressure), 2),
AirPressureRange = round(range(by_race$rangePressure), 2),
WindSpeedMean = round(range(by_race$meanWind), 2),
WindSpeedRange = round(range(by_race$rangeWind), 2)
)
kable(by_race_range)
#the range columns show the smallest and largest fluctuations in a race across all tracks and years
#the mean shows the smallest and largest averages across all tracks and years
View(weather)
View(weather_scale)
View(by_race)
View(laps)
View(messages)
shiny::runApp('C:/Users/andre/OneDrive/Desktop/thesis_test')
setwd("C:/Users/andre/OneDrive/Desktop/thesis_test")
runApp('C:/Users/andre/OneDrive/Desktop')
courses <- lapply(courses)
courses <- lapply(courses, sort)
courses <- c(
"Australia","Austria", "Bahrain","China", "Azerbaijan", "Spain", "Monaco", "Canada",
"France","Austria","Great Britain","Germany","Hungary","Belgium","Italy",
"Singapore","Russia","Japan","United States","Mexico","Brazil","United Arab Emirates",
"Abu Dhabi","Portugal","Turkey","Netherlands","Qatar","Saudi Arabia")
courses <- lapply(courses, sort)
View(courses)
